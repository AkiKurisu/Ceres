using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace Ceres.SourceGenerator;

internal class CreateExecutableEventGeneratorTemplate
{
    private const string StartTemplate =
        """
        /// <auto-generated>
        /// This file is auto-generated by Ceres.SourceGenerator. 
        /// All changes will be discarded.
        /// </auto-generated>
        {USING_NAMESPACES}
        namespace {NAMESPACE}
        {
            [System.Runtime.CompilerServices.CompilerGenerated]
            [System.Serializable]
            [Ceres.Annotations.CeresGroup("Utilities/Events")]
            [Ceres.Annotations.CeresLabel("Create {CLASSNAME}")]
            [Ceres.Annotations.CeresMetadata("style = ConstNode")]
            public class FlowNode_Create{CLASSNAME}: Ceres.Graph.Flow.FlowNode
            {
        """;
            
    private const string ImplementationTemplate =
        """

                protected override void LocalExecute(Ceres.Graph.Flow.ExecutionContext executionContext)
                {
        """;
    private const string EndTemplate =
        """
        
                }
            }
        }
        """;


    public string Namespace;

    public string ClassName;

    public GeneratorFunctionInfo FunctionInfo;

    public HashSet<string> Namespaces;

    public string GenerateCode()
    {
        var sb = new StringBuilder();
        var namedCode = StartTemplate
            .Replace("{USING_NAMESPACES}", string.Join("\n", Namespaces))
            .Replace("{NAMESPACE}", Namespace)
            .Replace("{CLASSNAME}", ClassName);
        sb.Append(namedCode);
        foreach (var parameter in FunctionInfo.Parameters)
        {
            sb.AppendLine(
               $"""
                
                        [Ceres.Annotations.InputPort]
                        public Ceres.Graph.CeresPort<{parameter.ParameterType}> {parameter.ParameterName};
                """);
        }
        sb.AppendLine(
            $"""
             
                     [Ceres.Annotations.OutputPort, Ceres.Annotations.CeresLabel("Event")]
                     public Ceres.Graph.CeresPort<{ClassName}> output;
             """);
        sb.Append(ImplementationTemplate);
        var list = new List<string>();
        list.AddRange(FunctionInfo.Parameters.Select(x => $"{x.ParameterName}.Value"));
        string parameters = string.Join(", ", list.ToArray());
        sb.Append(
            $"""
                             
                         output.Value = {ClassName}.{FunctionInfo.MethodName}({parameters});
             """);
        sb.Append(EndTemplate);
        return sb.ToString();
    }
}