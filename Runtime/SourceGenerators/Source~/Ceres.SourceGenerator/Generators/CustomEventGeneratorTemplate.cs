using System.Collections.Generic;
using System.Globalization;
using System.Text;

namespace Ceres.SourceGenerator;

internal class CustomEventGeneratorTemplate
{
    private const string StartTemplate =
        """
        /// <auto-generated>
        /// This file is auto-generated by Ceres.SourceGenerator. 
        /// All changes will be discarded.
        /// </auto-generated>
        {USING_NAMESPACES}
        namespace {NAMESPACE}
        {
            [System.Runtime.CompilerServices.CompilerGenerated]
            [System.Serializable]
            [Ceres.Annotations.CeresGroup("Hidden")]
            public class ExecutableEvent_{CLASSNAME}: Ceres.Graph.Flow.GeneratedExecutableEvent<{CLASSNAME}>
            {
                public ExecutableEvent_{CLASSNAME}()
                {
                    eventName = EventName;
                }
        """;

    private const string ImplementationTemplate =
        """


                protected override void LocalExecute(Ceres.Graph.Flow.ExecutionContext executionContext)
                {
                    UnityEngine.Assertions.Assert.IsNotNull(executionContext.GetEvent());
                    var evt = executionContext.GetEventT<{CLASSNAME}>();
        """;
    private const string EndTemplate =
        """
        
                }
            }
        }
        """;


    public string Namespace;

    public string ClassName;

    public List<GeneratorParameterInfo> PublicGetters;

    public HashSet<string> Namespaces;

    public string GenerateCode()
    {
        var sb = new StringBuilder();
        var namedCode = StartTemplate
            .Replace("{USING_NAMESPACES}", string.Join("\n", Namespaces))
            .Replace("{NAMESPACE}", Namespace)
            .Replace("{CLASSNAME}", ClassName);
        sb.Append(namedCode);
        foreach (var parameter in PublicGetters)
        {
            string normalizedName = GetNormalizedName(parameter.ParameterName);
            sb.Append(
               $"""
                

                        [Ceres.Annotations.OutputPort]
                        public Ceres.Graph.CeresPort<{parameter.ParameterType}> {normalizedName};
                """);
        }
        sb.Append(ImplementationTemplate.Replace("{CLASSNAME}", ClassName));
        foreach (var parameter in PublicGetters)
        {
            string normalizedName = GetNormalizedName(parameter.ParameterName);
            sb.Append(
               $"""
                             
                         {normalizedName}.Value =  evt.{parameter.ParameterName};
             """);
        }
        sb.Append(EndTemplate);
        return sb.ToString();
    }

    private static readonly TextInfo TextInfo = new CultureInfo("en-US", false).TextInfo;

    private static string GetNormalizedName(string name)
    {
        var sb = new StringBuilder();
        sb.Append(name);
        sb[0] = TextInfo.ToLower(sb[0]);
        return sb.ToString();
    }
}